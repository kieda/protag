options {
    USER_TOKEN_MANAGER=true;
    STATIC = false;
    SUPPORT_CLASS_VISIBILITY_PUBLIC=false;
    //GENERATE_BOILERPLATE = true;
}
PARSER_BEGIN(ProtagParserGen)
package io.hostilerobot.protag.lang;

import java.util.*;
import java.io.*;
import io.hostilerobot.protag.lang.ProtagLexer;
import io.hostilerobot.protag.lang.ProtagSymbol;
import io.hostilerobot.protag.lang.ProtagTokenType;
import io.hostilerobot.protag.lang.ast.*;
import io.hostilerobot.protag.lang.ast.impl.*;import org.apache.commons.math.fraction.Fraction;

class ProtagParserGen {
    public ProtagParserGen(ProtagLexer lexer) {
        this((TokenManager)lexer);
        token = new StartToken();
    }

    public void ReInit(ProtagLexer lexer) {
        this.ReInit((TokenManager) lexer);
        token = new StartToken();
    }
}


PARSER_END(ProtagParserGen)

// todo - factory for implementation?

/** Main production. */
//yapping ::= yapping_?
public IProtagSequence program() :
{
    IProtagSequence result = new ProtagSequence();
}
{
//  Plus() {return ESignType.PLUS; } | Minus() {return ESignType.MINUS; }
    [result=ProtagSequence(result, null)] <EOF>
    {
        return result;
    }
}
//private yapping_ ::= Properties|(item yapping_?)
IProtagSequence ProtagSequence(IProtagSequence result, IProtagProperties context) :
{
    IProtagProperties properties;
    ProtagNode item;
}
{
    LOOKAHEAD(baseData() spacing() <PROPERTY_SEP>)
    properties=ProtagProperties(context == null ? new ProtagProperties() : context)
    {
        if(context == null) {
            result.getItems().addFirst(properties);
        }
        return result;
    }
    | item=item() [LOOKAHEAD(item() | baseData() spacing() <PROPERTY_SEP>) ProtagSequence(result, context)]
    {
        if(item != null) {
            result.getItems().addFirst(item);
        }
        return result;
    }
}
//private item ::=
//    UnboundedData
//    |COMMENT|WHITESPACE // whitespace
private ProtagNode item() :
{
    ProtagNode item = null;
    LProtagLineComment lineComment;
}
{
    item=unboundedData()
    {
        return item;
    }
    |lineComment=ProtagLineComment()
    {
        // todo - add lineComment to meta table
        return null;
    }

    |<WHITESPACE>
    { return null; }
}

//private BaseData ::=
//    yPath1|jPath|fPath // paths. final path is a two part or more yapping segment
//    |ySegmentMulti  // single yapping segment (not a path)
//    |Precedence // (x)
//    |Map|List   // composite data
//    |REAL|QUOTIENT|INTEGER  // primitive - numbers
//    |REGEX|LITERAL|YNAME // primitive - string types
private ProtagNode baseData() :
{
    ProtagNode result;
}
{
    (
          LOOKAHEAD((protagSegmentExclNat() spacing() <DOT>)|(<NATURAL> spacing() <DOT> spacing() protagSegmentExclNat()))
          result=ProtagPath()
        | result=JavaPath()
        | result=FilePath()
        | LOOKAHEAD((containedSegment() (<PNAME>|<NATURAL>|containedSegment()))|((<PNAME>|<NATURAL>) containedSegment()))
          result=ProtagPathSegment()
        | result=ProtagPrecedence()
        | result=ProtagMap()
        | result=ProtagList()
        | LOOKAHEAD([Sign() spacing()] <NATURAL> <DOT>)
          result=ProtagReal()
        | LOOKAHEAD(IntegerVal() spacing() (<AND>|<SLASH>))
          result=ProtagQuotient()
        | result=ProtagInteger()
        | result=ProtagRegex()
        | result=ProtagLiteral()
        | result=ProtagName()
    )
    {
        return result;
    }
}

// *** Java Paths and Scopes ***
    IJavaPath JavaPath() :
    {
        LinkedList<IJavaPathSegment> segments = new LinkedList<>();
        List<IJavaPathSegment> result;
    }
    {
        <JPATH_START> spacing() result=jScope(segments)
        { return new JavaPath(segments); }
    }
    private List<IJavaPathSegment> jScope(LinkedList<IJavaPathSegment> segments) :
    {
        IJavaPathSegment item;
    }
    {
        item=JavaPathSegment() [LOOKAHEAD(spacing() <DOT>) spacing() <DOT> spacing() jScope(segments)]
        {
            segments.addFirst(item);
            return segments;
        }
    }
    public IJavaPathSegment JavaPathSegment() :
    {
        LinkedList<ProtagNode> pathSegments = new LinkedList<>();
        ProtagNode singleSegment;
    }
    {
        LOOKAHEAD(2)
        jSegmentMulti(pathSegments)
        {
            return new JavaPathSegment(pathSegments);
        }
        | singleSegment=jSegmentSingle()
        {
            pathSegments.addFirst(singleSegment);
            return new JavaPathSegment(pathSegments);
        }
    }
    private ProtagNode jSegmentSingle() :
    {
        Token jName;
        ProtagNode segment;
    }
    {
        jName=<JNAME>
        {
            ProtagStringToken pst = (ProtagStringToken) jName;
            return new LJavaName(String.valueOf(pst.getValue()));
        }
        | segment=containedSegment()
        {
            return segment;
        }
    }
    private List<ProtagNode> jSegmentMulti(LinkedList<ProtagNode> pathSegments) :
    {
        Token jName;
        ProtagNode segmentItem;
    }
    {
        LOOKAHEAD(2) jName=<JNAME> jSegmentExclJBody(pathSegments)
        {
            ProtagStringToken pst = (ProtagStringToken) jName;
            pathSegments.addFirst(new LJavaName(String.valueOf(pst.getValue())));
            return pathSegments;
        }
        | LOOKAHEAD(2) segmentItem=containedSegment() jSegmentInclJBody(pathSegments)
        {
            pathSegments.addFirst(segmentItem);
            return pathSegments;
        }
    }
    private List<ProtagNode> jSegmentInclJBody(LinkedList<ProtagNode> pathSegments) :
    {
        Token jBody;
    }
    {
        jBody=<JBODY> [LOOKAHEAD(containedSegment()) jSegmentExclJBody(pathSegments)]
        {
            ProtagStringToken pst = (ProtagStringToken) jBody;
            pathSegments.addFirst(new LJavaBody(String.valueOf(pst.getValue())));
            return pathSegments;
        }
        | LOOKAHEAD(containedSegment()) jSegmentExclJBody(pathSegments)
        {
            return pathSegments;
        }
    }
    private List<ProtagNode> jSegmentExclJBody(LinkedList<ProtagNode> pathSegments) :
    {
        ProtagNode segmentItem;
    }
    {
        segmentItem=containedSegment() [LOOKAHEAD(<JBODY>|containedSegment()) jSegmentInclJBody(pathSegments)]
        {
            pathSegments.addFirst(segmentItem);
            return pathSegments;
        }
    }

// *** File Paths and Scopes ***
    //    fPath ::= (FPATH_START spacing fScope)
    IFilePath FilePath() :
    {
        LinkedList<IFilePathSegment> segments = new LinkedList<>();
        List<IFilePathSegment> result;
    }
    {
        <FPATH_START> spacing() result=fScope(segments)
        { return new FilePath(segments); }
    }
    //    private fScope ::= fScopeSegment (spacing SLASH spacing fScope)?
    private List<IFilePathSegment> fScope(LinkedList<IFilePathSegment> segments) :
    {
        IFilePathSegment item;
    }
    {
        item=FilePathSegment() [LOOKAHEAD(spacing() <SLASH>) spacing() <SLASH> spacing() fScope(segments)]
        {
            segments.addFirst(item);
            return segments;
        }
    }
    //    private fScopeSegment ::= fSegmentMulti | fSegmentSingle
    IFilePathSegment FilePathSegment() :
    {
        LinkedList<ProtagNode> pathSegments = new LinkedList<>();
        ProtagNode singleSegment;
    }
    {
        LOOKAHEAD(2)
        fSegmentMulti(pathSegments)
        {
            return new FilePathSegment(pathSegments);
        }
        | singleSegment=fSegmentSingle()
        {
            pathSegments.addFirst(singleSegment);
            return new FilePathSegment(pathSegments);
        }
    }
    //    private fSegmentSingle ::= FNAME | containedSegment
    private ProtagNode fSegmentSingle() :
    {
        Token fName;
        ProtagNode segment;
    }
    {
        fName=<FNAME>
        {
            ProtagStringToken pst = (ProtagStringToken) fName;
            return new LFileName(String.valueOf(pst.getValue()));
        }
        | segment=containedSegment()
        { return segment; }
    }
    //    fSegmentMulti ::= (containedSegment fSegmentInclFName)
    //        | (FNAME fSegmentExclFName) {methods=[isElementType]}
    private List<ProtagNode> fSegmentMulti(LinkedList<ProtagNode> pathSegments) :
    {
        Token fName;
        ProtagNode segmentItem;
    }
    {
        LOOKAHEAD(2) fName=<FNAME> fSegmentExclFName(pathSegments)
        {
            ProtagStringToken pst = (ProtagStringToken) fName;
            pathSegments.addFirst(new LFileName(String.valueOf(pst.getValue())));
            return pathSegments;
        }
        | LOOKAHEAD(2) segmentItem=containedSegment() fSegmentInclFName(pathSegments)
        {
            pathSegments.addFirst(segmentItem);
            return pathSegments;
        }
    }
    //    private fSegmentInclFName ::= (FNAME (fSegmentExclFName?))
    //        | fSegmentExclFName
    private List<ProtagNode> fSegmentInclFName(LinkedList<ProtagNode> pathSegments) :
    {
        Token fBody;
    }
    {
        fBody=<FNAME> [LOOKAHEAD(containedSegment()) fSegmentExclFName(pathSegments)]
        {
            ProtagStringToken pst = (ProtagStringToken) fBody;
            pathSegments.addFirst(new LFileName(String.valueOf(pst.getValue())));
            return pathSegments;
        }
        | LOOKAHEAD(containedSegment()) fSegmentExclFName(pathSegments)
        {
            return pathSegments;
        }
    }
    //    private fSegmentExclFName ::= containedSegment fSegmentInclFName?
    private List<ProtagNode> fSegmentExclFName(LinkedList<ProtagNode> pathSegments) :
    {
        ProtagNode segmentItem;
    }
    {
        segmentItem=containedSegment() [LOOKAHEAD(<FNAME>|containedSegment()) fSegmentInclFName(pathSegments)]
        {
            pathSegments.addFirst(segmentItem);
            return pathSegments;
        }
    }

// *** Protag Paths and Scopes ***
//    //yPath0 ::= yPath1|NATURAL|ySegmentExclNat // single a or a(.b)+
//    yPath1 ::= ((NATURAL spacing DOT spacing ySegmentExclNat) (spacing DOT spacing yPathRest)?)
//        | (ySegmentExclNat spacing DOT spacing yPathRest) {methods=[isElementType]}
    public IProtagPath ProtagPath() :
    {

        LinkedList<IProtagPathSegment> segments = new LinkedList<>();
        IProtagPathSegment firstPart;
        IProtagPathSegment secondPart;
        Token firstPartNat;
    }
    {
        LOOKAHEAD(<NATURAL> spacing() <DOT> spacing() protagSegmentExclNat())
        firstPartNat=<NATURAL> spacing() <DOT> spacing()
            secondPart=protagSegmentExclNat()
            [LOOKAHEAD(spacing() <DOT>) spacing() <DOT> spacing() protagPathRest(segments)]
        {
            // first add the second part
            segments.addFirst(secondPart);

            // then add the first part, which is a segment that just consists of the natural
            ProtagNaturalToken pnt = (ProtagNaturalToken) firstPartNat;
            LProtagNatural firstNode = new LProtagNatural(pnt.getValue());
            LinkedList<ProtagNode> nodeList = new LinkedList<>();
            nodeList.addFirst(firstNode);
            segments.addFirst(new ProtagPathSegment(nodeList));
            return new ProtagPath(segments);
        }
        | LOOKAHEAD(protagSegmentExclNat() spacing() <DOT>)
        firstPart=protagSegmentExclNat() spacing() <DOT> spacing() protagPathRest(segments)
        {
            segments.addFirst(firstPart);
            return new ProtagPath(segments);
        }
    }
    //    private ySegmentExclNat ::= ySegmentMulti | containedSegment | YNAME  // multi segments are not considered nats
    private IProtagPathSegment protagSegmentExclNat() :
    {
        IProtagPathSegment segment;
        ProtagNode contained;
        Token ident;
    }
    {
        LOOKAHEAD((containedSegment() (<PNAME>|<NATURAL>|containedSegment()))|((<PNAME>|<NATURAL>) containedSegment()))
        segment=ProtagPathSegment()
        {
            return segment;
        }
        | contained=containedSegment()
        {
            LinkedList<ProtagNode> segmentItems = new LinkedList<>();
            segmentItems.add(contained);
            return new ProtagPathSegment(segmentItems);
        }
        | ident=<PNAME>
        {
            ProtagStringToken pst = (ProtagStringToken) ident;

            LinkedList<ProtagNode> segmentItems = new LinkedList<>();
            segmentItems.add(new LProtagName(String.valueOf(ident.getValue())));
            return new ProtagPathSegment(segmentItems);
        }
    }
    //    private yPathRest ::= (ySegmentMulti|containedSegment|YNAME|NATURAL) (spacing DOT spacing yPathRest)?
    private List<IProtagPathSegment> protagPathRest(LinkedList<IProtagPathSegment> segments) :
    {
        IProtagPathSegment segment;
        ProtagNode singleNodeSegment;
        Token singleTokenSegment;
    }
    {
        (
            LOOKAHEAD((containedSegment() (<PNAME>|<NATURAL>|containedSegment()))|((<PNAME>|<NATURAL>) containedSegment()))
            segment=ProtagPathSegment()
            {
                segments.add(segment);
            }
            | singleNodeSegment=containedSegment()
            {
                LinkedList<ProtagNode> segmentItems = new LinkedList<>();
                segmentItems.add(singleNodeSegment);
                segments.add(new ProtagPathSegment(segmentItems));
            }
            | singleTokenSegment=<PNAME>
            {
                ProtagStringToken pst = (ProtagStringToken) singleTokenSegment;
                LinkedList<ProtagNode> segmentItems = new LinkedList<>();
                segmentItems.add(new LProtagName(String.valueOf(pst.getValue())));
                segments.add(new ProtagPathSegment(segmentItems));
            }
            | singleTokenSegment=<NATURAL>
            {
                ProtagNaturalToken pnt = (ProtagNaturalToken) singleTokenSegment;
                LinkedList<ProtagNode> segmentItems = new LinkedList<>();
                segmentItems.add(new LProtagNatural(pnt.getValue()));

                segments.add(new ProtagPathSegment(segmentItems));
            }
        ) [LOOKAHEAD(spacing() <DOT>) spacing() <DOT> spacing() protagPathRest(segments)]
        {return segments;}
    }
    //    ySegmentMulti ::= (containedSegment ySegmentInclVals)
    //        | ((YNAME|NATURAL) ySegmentExclVals) {methods=[isElementType]}
    IProtagPathSegment ProtagPathSegment() :
    {
        LinkedList<ProtagNode> segmentItems = new LinkedList<>();
        ProtagNode firstNodeSegmentItem;
        Token firstTokenSegmentItem;
    }
    {
        (
            firstNodeSegmentItem=containedSegment() protagSegmentInclVals(segmentItems)
            {
                segmentItems.addFirst(firstNodeSegmentItem);
            }
        |
            (
                firstTokenSegmentItem=<PNAME>
                {
                    ProtagStringToken pst = (ProtagStringToken) firstTokenSegmentItem;
                    segmentItems.add(new LProtagName(String.valueOf(pst.getValue())));
                }
            |   firstTokenSegmentItem=<NATURAL>
                {
                    ProtagNaturalToken pnt = (ProtagNaturalToken) firstTokenSegmentItem;
                    segmentItems.add(new LProtagNatural(pnt.getValue()));
                }
            ) protagSegmentExclVals(segmentItems)
        )
        { return new ProtagPathSegment(segmentItems); }
    }
    //    private ySegmentExclVals ::= containedSegment ySegmentInclVals?
    private List<ProtagNode> protagSegmentExclVals(LinkedList<ProtagNode> segmentItems) :
    {
        ProtagNode segmentItem;
    }
    {

        segmentItem=containedSegment()
        {
            segmentItems.add(segmentItem);
        }
        [LOOKAHEAD(<NATURAL>|<PBODY>|containedSegment()) protagSegmentInclVals(segmentItems)]

        {return segmentItems;}
    }
    //    private ySegmentInclVals ::= ((NATURAL|YBODY) ySegmentExclVals?)
    //        | ySegmentExclVals
    private List<ProtagNode> protagSegmentInclVals(LinkedList<ProtagNode> segmentItems) :
    {
        Token firstTokenSegmentItem;
    }
    {
        (
            (
                firstTokenSegmentItem=<NATURAL>
                {
                    ProtagNaturalToken pnt = (ProtagNaturalToken) firstTokenSegmentItem;
                    segmentItems.add(new LProtagNatural(pnt.getValue()));
                }
            |   firstTokenSegmentItem=<PBODY>
                {
                    ProtagStringToken pst = (ProtagStringToken) firstTokenSegmentItem;
                    segmentItems.add(new LProtagBody(String.valueOf(pst.getValue())));
                }
            ) [LOOKAHEAD(containedSegment()) protagSegmentExclVals(segmentItems)]
        |   protagSegmentExclVals(segmentItems)
        )
        { return segmentItems; }
    }


//QUOTIENT ::= (INTEGER spacing AND spacing)? INTEGER spacing SLASH spacing NATURAL // 1 & 3/4, -1 &3/4, +1 & -3/4, 1/2
LProtagQuotient ProtagQuotient() :
{
    XInteger intPart;
    XInteger numerator;
    Token denominator;
}
{
    LOOKAHEAD(IntegerVal() spacing() <AND>)
    intPart=IntegerVal() spacing() <AND> spacing() numerator=IntegerVal() spacing() <SLASH> spacing() denominator=<NATURAL>
    {
        int integerPart = intPart.toInteger();
        // todo if denominator is zero, we should probably throw somewhere and make it more explicit to user
        Fraction fractionalPart = new Fraction(numerator.toInteger(), ((ProtagNaturalToken)denominator).getValue());
        return new LProtagQuotient(fractionalPart.add(integerPart));
    }
    |
    numerator=IntegerVal() spacing() <SLASH> spacing() denominator=<NATURAL>
    {
        Fraction fractionalPart = new Fraction(numerator.toInteger(), ((ProtagNaturalToken)denominator).getValue());
        return new LProtagQuotient(fractionalPart);
    }
}

XInteger IntegerVal() :
{
    ESignType sign = ESignType.NONE;
    Token nat;
}
{
    [sign=Sign() spacing()] nat=<NATURAL>
    {
        return new XInteger(sign, ((ProtagNaturalToken)nat).getValue());
    }
}
//INTEGER ::= (SIGN spacing)? NATURAL
LProtagInteger ProtagInteger() :
{
    ESignType sign = ESignType.NONE;
    Token nat;
}
{
    [sign=Sign() spacing()] nat=<NATURAL>
    {
        return new LProtagInteger(sign.negate(((ProtagNaturalToken)nat).getValue()));
    }
}
//REAL ::= (SIGN spacing)? DECIMAL
LProtagReal ProtagReal() :
{
    ESignType sign = ESignType.NONE;
    XDecimal decimal;
}
{
    [sign=Sign() spacing()] decimal=Decimal()
    {
        return new LProtagReal(decimal.toDouble(sign));
    }
}
//private DECIMAL ::= NATURAL DOT NATURAL // define DECIMAL in parser rather than lexer, as this might be part of a ysegment rather than a decimal
XDecimal Decimal() :
{
    Token integerPart;
    Token fractionalPart;
}
{
    integerPart=<NATURAL> <DOT> fractionalPart=<NATURAL>
    { return new XDecimal(((ProtagNaturalToken)integerPart).getValue(), ((ProtagNaturalToken)fractionalPart).getValue());}
}
//private SIGN ::= (PLUS|MINUS)
ESignType Sign() :
{}
{
    <PLUS>
    { return ESignType.PLUS; }
|   <MINUS>
    { return ESignType.MINUS; }
}

//Properties ::= BaseData spacing PROPERTY_SEP (yapping_)? {
IProtagProperties ProtagProperties(IProtagProperties context) :
{
//    IProtagProperties result = context == null ? new ProtagProperties() : context;
    ProtagNode name;
    IProtagSequence body = new ProtagSequence();
}
{
    name=baseData() spacing() <PROPERTY_SEP> [LOOKAHEAD(item() | baseData() spacing() <PROPERTY_SEP>) body=ProtagSequence(body, context)]
    {
        ProtagSection section = new ProtagSection(name, body);
        context.getItems().addFirst(section);
        return context;
    }
}

//Map ::= (MAP_START spacing MAP_END) // {}
//    // { a = b[, c = d]* }
//    | (MAP_START spacing PairBounded (spacing LIST_SEP spacing PairBounded)* spacing MAP_END) {
//        methods=[isElementType]
//    }
IProtagMap ProtagMap() :
{
    LinkedList<IProtagPair> entries = new LinkedList<>();
    IProtagPair entry;
}
{
    LOOKAHEAD(<MAP_START> spacing() <MAP_END>)
    <MAP_START> spacing() <MAP_END>
    {
        return new ProtagMap(entries);
    }
    |
    <MAP_START>
        spacing() entry=pairBounded()
        {
            entries.add(entry);
        }
        (
            LOOKAHEAD(spacing() <LIST_SEP>)
            spacing() <LIST_SEP> spacing() entry=pairBounded()
            {
                entries.add(entry);
            }
        )* spacing()
    <MAP_END>
    {
        return new ProtagMap(entries);
    }
}

//List ::= (LIST_START LIST_END) // []
//    // [a[, b]*]
//    | LIST_START spacing BoundedData (spacing LIST_SEP spacing BoundedData)* spacing LIST_END {
//        methods=[isElement]
//    }
IProtagList ProtagList() :
{
    LinkedList<ProtagNode> list = new LinkedList<>();
    IProtagList result = new ProtagList(list);
    ProtagNode item;
}
{
    LOOKAHEAD(<LIST_START> spacing() <LIST_END>)
    <LIST_START> spacing() <LIST_END>
    {
        return result;
    }
|   LOOKAHEAD(<LIST_START> spacing() boundedData())
    <LIST_START>
        spacing() item=boundedData()
        {
            list.add(item);
        }
        (
            LOOKAHEAD(spacing() <LIST_SEP>)
            spacing() <LIST_SEP> spacing() item=boundedData()
            {
                list.add(item);
            }
        )*
        spacing()
    <LIST_END>
    {
        return result;
    }
}

//Precedence ::= PRECEDENCE_START spacing BoundedData spacing PRECEDENCE_END
IProtagPrecedence ProtagPrecedence() :
{
    ProtagNode data;
}
{
    <PRECEDENCE_START> spacing() data=boundedData() spacing() <PRECEDENCE_END>
    {
        return new ProtagPrecedence(data);
    }
}

//private UnboundedData ::= PairExpr|TransitionRightExpr|TransitionLeftExpr|BaseData
private ProtagNode unboundedData() :
{
    ProtagNode result;
}
{
    (
        LOOKAHEAD((ProtagTransitionRight() | ProtagTransitionLeft() | baseData()) spacing() <PAIR_SEP>)
        result = ProtagPair()
    |   LOOKAHEAD((ProtagTransitionLeft() | baseData()) spacing() <TRANSITION_SEP_R>)
        result = ProtagTransitionRight()
    |   LOOKAHEAD(baseData() spacing() <TRANSITION_SEP_L>)
        result = ProtagTransitionLeft()
    |   LOOKAHEAD(baseData())
        result = baseData()
    )
    { return result; }
}

//PairExpr ::= (TransitionRightExpr|TransitionLeftExpr|BaseData) spacing PAIR_SEP spacing UnboundedData
IProtagPair ProtagPair() :
{
    ProtagNode lhs;
    ProtagNode rhs;
}
{
    (
        LOOKAHEAD(baseData() spacing() <TRANSITION_SEP_L>)
        lhs=ProtagTransitionLeft()
    |   LOOKAHEAD((ProtagTransitionLeft() | baseData()) spacing() <TRANSITION_SEP_R>)
        lhs=ProtagTransitionRight()
    |   LOOKAHEAD(baseData())
        lhs=baseData()
    )
    spacing() <PAIR_SEP> spacing()
    rhs=unboundedData()
    {
        return new ProtagPair(lhs, rhs);
    }
}
//TransitionRightExpr ::= (TransitionLeftExpr|BaseData) spacing TRANSITION_SEP_R spacing (TransitionRightExpr|TransitionLeftExpr|BaseData)
IProtagTransitionRight ProtagTransitionRight() :
{
    ProtagNode lhs;
    ProtagNode rhs;
}
{
    (
        LOOKAHEAD(baseData() spacing() <TRANSITION_SEP_L>)
        lhs=ProtagTransitionLeft()
    |   LOOKAHEAD(baseData())
        lhs=baseData()
    )
    spacing() <TRANSITION_SEP_R> spacing()
    (
        LOOKAHEAD((ProtagTransitionLeft() | baseData()) spacing() <TRANSITION_SEP_R>)
        rhs=ProtagTransitionRight()

    |   LOOKAHEAD(baseData() spacing() <TRANSITION_SEP_L>)
        rhs=ProtagTransitionLeft()

    |   LOOKAHEAD(baseData())
        rhs=baseData()
    )
    {
        return new ProtagTransitionRight(lhs, rhs);
    }
}
//TransitionLeftExpr ::= BaseData spacing TRANSITION_SEP_L spacing (TransitionLeftExpr|BaseData)
IProtagTransitionLeft ProtagTransitionLeft() :
{
    ProtagNode lhs;
    ProtagNode rhs;
}
{
//    LOOKAHEAD(baseData() spacing() <TRANSITION_SEP_L>)
    lhs=baseData()
    spacing() <TRANSITION_SEP_L> spacing()
    (
        LOOKAHEAD(baseData() spacing() <TRANSITION_SEP_L>)
        rhs=ProtagTransitionLeft()
    |   //LOOKAHEAD(baseData())
        rhs=baseData()
    )
    {
        return new ProtagTransitionLeft(lhs, rhs);
    }
}

//
//private BoundedData ::= PairBounded|TransitionRightBounded|TransitionLeftBounded|Properties|BaseData
private ProtagNode boundedData() :
{
    ProtagNode result;
}
{
    ( LOOKAHEAD((ProtagTransitionRight() | ProtagTransitionLeft() | baseData()) spacing() <PAIR_SEP>)
      result=pairBounded()
    | LOOKAHEAD((ProtagTransitionLeft() | baseData()) spacing() <TRANSITION_SEP_R>)
      result=ProtagTransitionRightBounded()
    | LOOKAHEAD(baseData() spacing() <TRANSITION_SEP_L>)
      result=ProtagTransitionLeftBounded()
    | LOOKAHEAD(baseData() spacing() <PROPERTY_SEP>)
      result=ProtagProperties(new ProtagProperties())
    | LOOKAHEAD(baseData())
      result=baseData()
    )
    {
        return result;
    }
}

//PairBounded ::= (TransitionRightExpr|TransitionLeftExpr|BaseData) spacing PAIR_SEP spacing BoundedData
private IProtagPair pairBounded() :
{
    ProtagNode lhs;
    ProtagNode rhs;
}
{
    (
        LOOKAHEAD(baseData() spacing() <TRANSITION_SEP_L>)
        lhs=ProtagTransitionRight()
    |   LOOKAHEAD((ProtagTransitionLeft() | baseData()) spacing() <TRANSITION_SEP_R>)
        lhs=ProtagTransitionLeft()
    |   LOOKAHEAD(baseData())
        lhs=baseData()
    )
    spacing() <PAIR_SEP> spacing()
    rhs=boundedData()
    {
        return new ProtagPair(lhs, rhs);
    }
}
//TransitionRightBounded ::= (TransitionLeftExpr|BaseData) spacing TRANSITION_SEP_R spacing (TransitionRightBounded|TransitionLeftBounded|Properties|BaseData)
private IProtagTransitionRight ProtagTransitionRightBounded() :
{
    ProtagNode lhs;
    ProtagNode rhs;
}
{
    (
        LOOKAHEAD(baseData() spacing() <TRANSITION_SEP_L>)
        lhs=ProtagTransitionLeft()
    |   LOOKAHEAD(baseData())
        lhs=baseData()
    )
    spacing() <TRANSITION_SEP_R> spacing()
    (
        LOOKAHEAD((ProtagTransitionLeft() | baseData()) spacing() <TRANSITION_SEP_R>)
        rhs=ProtagTransitionRightBounded()
    |   LOOKAHEAD(baseData() spacing() <TRANSITION_SEP_L>)
        rhs=ProtagTransitionLeftBounded()
    |   LOOKAHEAD(baseData() spacing() <PROPERTY_SEP>)
        rhs=ProtagProperties(new ProtagProperties())
    |   LOOKAHEAD(baseData())
        rhs=baseData()
    )
    {
        return new ProtagTransitionRight(lhs, rhs);
    }
}
//TransitionLeftBounded ::= BaseData spacing TRANSITION_SEP_L spacing (TransitionLeftBounded|Properties|BaseData)
private IProtagTransitionLeft ProtagTransitionLeftBounded() :
{
    ProtagNode lhs;
    ProtagNode rhs;
}
{
    lhs=baseData()
    spacing() <TRANSITION_SEP_L> spacing()
    (
        LOOKAHEAD(baseData() spacing() <TRANSITION_SEP_L>)
        rhs=ProtagTransitionLeftBounded()
    |   LOOKAHEAD(baseData() spacing() <PROPERTY_SEP>)
        rhs=ProtagProperties(new ProtagProperties())
    |   LOOKAHEAD(baseData())
        rhs=baseData()
    )
    {
        return new ProtagTransitionLeft(lhs, rhs);
    }
}

//
//// all these items that can be contained in a path and have incipient and terminator chars.
//private containedSegment ::= REGEX|LITERAL|List|Map|Precedence
private ProtagNode containedSegment() :
{
    ProtagNode result;
}
{
    ( result=ProtagRegex()
    | result=ProtagLiteral()
    | result=ProtagList()
    | result=ProtagMap()
    | result=ProtagPrecedence() )

    {
        return result;
    }
}
//| ProtagRegex()
//    | ProtagLiteral()
//    | ProtagIdentifier()
IProtagRegex ProtagRegex() :
{
    Token tok;
}
{
    tok=<REGEX>
    {
        ProtagStringToken pst = (ProtagStringToken) tok;
        return new LProtagRegexRaw(String.valueOf(pst.getValue()));
    }
}
LProtagLiteral ProtagLiteral() :
{
    Token tok;
}
{
    tok=<LITERAL>
    {
        ProtagStringToken lit = (ProtagStringToken) tok;
        return new LProtagLiteral(String.valueOf(lit.getValue()));
    }
}
LProtagName ProtagName() :
{
    Token tok;
}
{
    tok=<PNAME>
    {
        ProtagStringToken lit = (ProtagStringToken) tok;
        return new LProtagName(String.valueOf(lit.getValue()));
    }
}
//// asdf10&3/4 vs "asdf"10 & 3/4"asdf"
//// spacing items
//private spacing ::= (WHITESPACE|COMMENT)*
private List<LProtagLineComment> spacing() :
{
    List<LProtagLineComment> result = new ArrayList<>();
    LProtagLineComment comment;
}
{
    ( <WHITESPACE>
      | comment=ProtagLineComment()
      {
          result.add(comment);
      }
    )*
    {return result;}
}

private LProtagLineComment ProtagLineComment() :
{
    Token comment;
}
{
    comment=<COMMENT>
    {return new LProtagLineComment(((ProtagStringToken)comment).getValue());}
}