import:
    !protag/[export, rules, types].pt
    !protag/lib.pt
pass-java-args:
    # this allows us to pass args to a call to a single static java method
    # in the form @com.user.MyClass.method(args: ...)
    pass-java =
        (X :> ^java-path)((args: Y <- *) <- -actual)
        -> @io.hostilerobot.protag.stdlib.PassJavaArgs: X Y;
pass-protag-args:
    pass-protag =
        (X :> ^protag-path) ((args: Y <- *) <- -actual)
        -> @io.hostilerobot.protag.stdlib.PassProtagArgs: X Y;
accept-protag-args:
    /* # Format
     * {
     *     match-rule = result <: (-default = ...)
     * } <: (-default = ...)
     *
     * we may define a default value for a given rule, and we may also define a default value if there are no rules that match
     */
    accept-args = accept-rules # define accept-rules as the node we match
        :> { (_ :> ^matchable = _ <: ("-default" = _) <- [-property, ?]) <- * } # we have a map from rules to some value, and an optional -default property tag
            <: ("-default" = _ :> [ _ ]) <- [-property, ?] # we may also have an optional -default property tag (e.g. when no rules match/no args specified)
        -> import: @io.hostilerobot.protag.stdlib.ProtagArgsAcceptor
           rules: accept-rules;
export:
    pass-java
    pass-protag
    args = accept-args # this will only match when we're in a args: environment

/*
 * we want a = b
 */