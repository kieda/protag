
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package io.hostilerobot.protag.lang;

import java.util.*;
import java.io.*;
import java_cup.runtime.Symbol;
import java_cup.runtime.SymbolFactory;
import io.hostilerobot.protag.lang.ProtagLexer;
import io.hostilerobot.protag.lang.ProtagSymbol;
import io.hostilerobot.protag.lang.ProtagSymbolFactory;
import io.hostilerobot.protag.lang.ProtagTokenType;
import io.hostilerobot.protag.lang.ast.*;
import io.hostilerobot.protag.lang.ast.impl.*;
import io.hostilerobot.protag.meta.*;
import io.hostilerobot.protag.meta.ProtagMetaTable.ProtagMetaBuilder;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ProtagParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ProtagSymbols.class;
}

  /** Default constructor. */
  @Deprecated
  public ProtagParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ProtagParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ProtagParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\026\000\002\002\004\000\002\006\003\000\002\006" +
    "\003\000\002\005\004\000\002\005\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\011\003\000" +
    "\002\011\003\000\002\002\005\000\002\002\003\000\002" +
    "\003\005\000\002\003\003\000\002\014\005\000\002\013" +
    "\003\000\002\013\003\000\002\010\003\000\002\015\004" +
    "\000\002\015\004\000\002\015\002\000\002\004\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\034\000\014\005\014\006\004\007\022\010\006\011" +
    "\020\001\002\000\010\007\ufff1\010\ufff1\011\ufff1\001\002" +
    "\000\016\002\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9\011" +
    "\ufff9\001\002\000\016\002\ufffa\005\ufffa\006\ufffa\007\ufffa" +
    "\010\ufffa\011\ufffa\001\002\000\016\002\ufff4\005\ufff4\006" +
    "\ufff4\007\ufff4\010\ufff4\011\ufff4\001\002\000\004\002\036" +
    "\001\002\000\016\002\ufff0\005\ufff0\006\ufff0\007\ufff0\010" +
    "\ufff0\011\ufff0\001\002\000\004\002\uffff\001\002\000\004" +
    "\002\000\001\002\000\010\007\ufff2\010\ufff2\011\ufff2\001" +
    "\002\000\016\002\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb" +
    "\011\ufffb\001\002\000\016\002\ufffd\005\014\006\004\007" +
    "\022\010\006\011\020\001\002\000\016\002\ufff8\005\ufff8" +
    "\006\ufff8\007\ufff8\010\ufff8\011\ufff8\001\002\000\020\002" +
    "\ufff6\004\032\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6" +
    "\001\002\000\016\002\ufffc\005\ufffc\006\ufffc\007\ufffc\010" +
    "\ufffc\011\ufffc\001\002\000\016\002\uffec\005\uffec\006\uffec" +
    "\007\uffec\010\uffec\011\uffec\001\002\000\010\007\022\010" +
    "\024\011\uffed\001\002\000\010\007\022\010\024\011\uffed" +
    "\001\002\000\004\011\031\001\002\000\010\007\022\010" +
    "\024\011\uffed\001\002\000\004\011\uffee\001\002\000\016" +
    "\002\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\001" +
    "\002\000\020\002\ufff7\004\032\005\ufff7\006\ufff7\007\ufff7" +
    "\010\ufff7\011\ufff7\001\002\000\004\011\033\001\002\000" +
    "\016\002\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3\011\ufff3" +
    "\001\002\000\004\011\uffef\001\002\000\004\002\ufffe\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\034\000\030\002\016\003\004\004\014\005\012\006" +
    "\007\007\015\010\020\011\010\012\011\013\022\014\006" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\002\016\003\004\004\014\005\034" +
    "\007\015\010\020\011\010\013\022\014\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\025\015\024\001\001\000\006\004" +
    "\025\015\033\001\001\000\004\014\027\001\001\000\006" +
    "\004\025\015\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ProtagParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ProtagParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ProtagParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 lexer.reset(); 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 ProtagSymbol s =  lexer.next_token(); System.out.println("INCOMING: " + s); return s; 
    }


    ProtagMetaTable metaTable;
    ProtagLexer lexer;
    ProtagSymbolFactory symbolFactory;
    ProtagParser(ProtagLexer lex, ProtagSymbolFactory sf) {
        super(lex, sf);
        this.metaTable = new ProtagMetaTable();
        this.lexer = lex;
        this.symbolFactory = sf;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ProtagParser$actions {


//    ASTMetaInfoFactory<ProtagMetaInfo> factory = metaTable.getFactory();

    public void addComments(ProtagMetaBuilder meta, List<LProtagLineComment> comments) {
        if(comments == null)
            return;
        for(LProtagLineComment comment : comments) {
//            comment.setParent(parent);
            meta.addComment(comment);
        }
    }


  private final ProtagParser parser;

  /** Constructor */
  CUP$ProtagParser$actions(ProtagParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ProtagParser$do_action_part00000000(
    int                        CUP$ProtagParser$act_num,
    java_cup.runtime.lr_parser CUP$ProtagParser$parser,
    java.util.Stack            CUP$ProtagParser$stack,
    int                        CUP$ProtagParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ProtagParser$result;

      /* select the action based on the action number */
      switch (CUP$ProtagParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.elementAt(CUP$ProtagParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.elementAt(CUP$ProtagParser$top-1)).right;
		IProtagSequence start_val = (IProtagSequence)((java_cup.runtime.Symbol) CUP$ProtagParser$stack.elementAt(CUP$ProtagParser$top-1)).value;
		RESULT = start_val;
              CUP$ProtagParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.elementAt(CUP$ProtagParser$top-1)), ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ProtagParser$parser.done_parsing();
          return CUP$ProtagParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= protag 
            {
              IProtagSequence RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.peek()).right;
		IProtagSequence val = (IProtagSequence)((java_cup.runtime.Symbol) CUP$ProtagParser$stack.peek()).value;
		 RESULT = val; 
              CUP$ProtagParser$result = parser.getSymbolFactory().newSymbol("program",4, ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.peek()), RESULT);
            }
          return CUP$ProtagParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= EOF 
            {
              IProtagSequence RESULT =null;
		
        RESULT = new ProtagSequence();
    
              CUP$ProtagParser$result = parser.getSymbolFactory().newSymbol("program",4, ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.peek()), RESULT);
            }
          return CUP$ProtagParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // protag ::= _item protag 
            {
              IProtagSequence RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.elementAt(CUP$ProtagParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.elementAt(CUP$ProtagParser$top-1)).right;
		ProtagNode i = (ProtagNode)((java_cup.runtime.Symbol) CUP$ProtagParser$stack.elementAt(CUP$ProtagParser$top-1)).value;
		int restleft = ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.peek()).left;
		int restright = ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.peek()).right;
		IProtagSequence rest = (IProtagSequence)((java_cup.runtime.Symbol) CUP$ProtagParser$stack.peek()).value;
		
        if(i == null) {
            RESULT = rest;
        } else if(rest == null){
            RESULT = new ProtagSequence();
            i.setParent(RESULT);
        } else {
            rest.getItems().addFirst(i);
            RESULT = rest;
            i.setParent(RESULT);
        }
    
              CUP$ProtagParser$result = parser.getSymbolFactory().newSymbol("protag",3, ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.elementAt(CUP$ProtagParser$top-1)), ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.peek()), RESULT);
            }
          return CUP$ProtagParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // protag ::= _item 
            {
              IProtagSequence RESULT =null;
		int itemleft = ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.peek()).left;
		int itemright = ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.peek()).right;
		ProtagNode item = (ProtagNode)((java_cup.runtime.Symbol) CUP$ProtagParser$stack.peek()).value;
		
        if(item == null) {
            RESULT = null;
        } else {
            RESULT = new ProtagSequence();
            item.setParent(RESULT);
            RESULT.getItems().addFirst(item);
        }
    
              CUP$ProtagParser$result = parser.getSymbolFactory().newSymbol("protag",3, ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.peek()), RESULT);
            }
          return CUP$ProtagParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // _item ::= _unboundedData 
            {
              ProtagNode RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.peek()).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.peek()).right;
		ProtagNode data = (ProtagNode)((java_cup.runtime.Symbol) CUP$ProtagParser$stack.peek()).value;
		RESULT = data;
              CUP$ProtagParser$result = parser.getSymbolFactory().newSymbol("_item",5, ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.peek()), RESULT);
            }
          return CUP$ProtagParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // _item ::= ProtagComment 
            {
              ProtagNode RESULT =null;
		int commentleft = ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.peek()).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.peek()).right;
		LProtagLineComment comment = (LProtagLineComment)((java_cup.runtime.Symbol) CUP$ProtagParser$stack.peek()).value;
		RESULT = comment;
              CUP$ProtagParser$result = parser.getSymbolFactory().newSymbol("_item",5, ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.peek()), RESULT);
            }
          return CUP$ProtagParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // _item ::= WHITESPACE 
            {
              ProtagNode RESULT =null;
		RESULT = null;
              CUP$ProtagParser$result = parser.getSymbolFactory().newSymbol("_item",5, ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.peek()), RESULT);
            }
          return CUP$ProtagParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // _baseData ::= ProtagReal 
            {
              ProtagNode RESULT =null;
		int realleft = ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.peek()).left;
		int realright = ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.peek()).right;
		LProtagReal real = (LProtagReal)((java_cup.runtime.Symbol) CUP$ProtagParser$stack.peek()).value;
		
        RESULT = real;
        // todo - set comments of real, integer's parents to real
        metaTable.getBuilder(real).build(
            symbolFactory.lookup("ProtagReal", real)
        );
    
              CUP$ProtagParser$result = parser.getSymbolFactory().newSymbol("_baseData",7, ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.peek()), RESULT);
            }
          return CUP$ProtagParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // _baseData ::= ProtagInteger 
            {
              ProtagNode RESULT =null;
		int integerleft = ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.peek()).left;
		int integerright = ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.peek()).right;
		LProtagInteger integer = (LProtagInteger)((java_cup.runtime.Symbol) CUP$ProtagParser$stack.peek()).value;
		
        RESULT = integer;
        metaTable.getBuilder(integer).build(
            symbolFactory.lookup("ProtagInteger", integer)
        );
    
              CUP$ProtagParser$result = parser.getSymbolFactory().newSymbol("_baseData",7, ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.peek()), RESULT);
            }
          return CUP$ProtagParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ProtagInteger ::= _sign spacing NATURAL 
            {
              LProtagInteger RESULT =null;
		int signleft = ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.elementAt(CUP$ProtagParser$top-2)).left;
		int signright = ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.elementAt(CUP$ProtagParser$top-2)).right;
		ESignType sign = (ESignType)((java_cup.runtime.Symbol) CUP$ProtagParser$stack.elementAt(CUP$ProtagParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.elementAt(CUP$ProtagParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.elementAt(CUP$ProtagParser$top-1)).right;
		LinkedList<LProtagLineComment> c = (LinkedList<LProtagLineComment>)((java_cup.runtime.Symbol) CUP$ProtagParser$stack.elementAt(CUP$ProtagParser$top-1)).value;
		int natleft = ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.peek()).left;
		int natright = ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.peek()).right;
		Integer nat = (Integer)((java_cup.runtime.Symbol) CUP$ProtagParser$stack.peek()).value;
		
        RESULT = new LProtagInteger(sign.negate(nat));
        var builder = metaTable.createBuilder(RESULT);
        addComments(builder, c);
        System.out.println(metaTable);
    
              CUP$ProtagParser$result = parser.getSymbolFactory().newSymbol("ProtagInteger",0, ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.elementAt(CUP$ProtagParser$top-2)), ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.peek()), RESULT);
            }
          return CUP$ProtagParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ProtagInteger ::= NATURAL 
            {
              LProtagInteger RESULT =null;
		int natleft = ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.peek()).left;
		int natright = ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.peek()).right;
		Integer nat = (Integer)((java_cup.runtime.Symbol) CUP$ProtagParser$stack.peek()).value;
		
        RESULT = new LProtagInteger(nat);
        metaTable.createBuilder(RESULT);
        System.out.println(metaTable);
    
              CUP$ProtagParser$result = parser.getSymbolFactory().newSymbol("ProtagInteger",0, ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.peek()), RESULT);
            }
          return CUP$ProtagParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ProtagReal ::= _sign spacing _decimal 
            {
              LProtagReal RESULT =null;
		int signleft = ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.elementAt(CUP$ProtagParser$top-2)).left;
		int signright = ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.elementAt(CUP$ProtagParser$top-2)).right;
		ESignType sign = (ESignType)((java_cup.runtime.Symbol) CUP$ProtagParser$stack.elementAt(CUP$ProtagParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.elementAt(CUP$ProtagParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.elementAt(CUP$ProtagParser$top-1)).right;
		LinkedList<LProtagLineComment> c = (LinkedList<LProtagLineComment>)((java_cup.runtime.Symbol) CUP$ProtagParser$stack.elementAt(CUP$ProtagParser$top-1)).value;
		int decimalleft = ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.peek()).left;
		int decimalright = ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.peek()).right;
		XDecimal decimal = (XDecimal)((java_cup.runtime.Symbol) CUP$ProtagParser$stack.peek()).value;
		
        RESULT = new LProtagReal(decimal.toDouble(sign));
        var builder = metaTable.createBuilder(RESULT);
        addComments(builder, c);
        System.out.println(metaTable);
    
              CUP$ProtagParser$result = parser.getSymbolFactory().newSymbol("ProtagReal",1, ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.elementAt(CUP$ProtagParser$top-2)), ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.peek()), RESULT);
            }
          return CUP$ProtagParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ProtagReal ::= _decimal 
            {
              LProtagReal RESULT =null;
		int decimalleft = ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.peek()).left;
		int decimalright = ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.peek()).right;
		XDecimal decimal = (XDecimal)((java_cup.runtime.Symbol) CUP$ProtagParser$stack.peek()).value;
		
        RESULT = new LProtagReal(decimal.toDouble(ESignType.NONE));
        metaTable.createBuilder(RESULT);
        System.out.println(metaTable);
    
              CUP$ProtagParser$result = parser.getSymbolFactory().newSymbol("ProtagReal",1, ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.peek()), RESULT);
            }
          return CUP$ProtagParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // _decimal ::= NATURAL DOT NATURAL 
            {
              XDecimal RESULT =null;
		int integerPartleft = ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.elementAt(CUP$ProtagParser$top-2)).left;
		int integerPartright = ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.elementAt(CUP$ProtagParser$top-2)).right;
		Integer integerPart = (Integer)((java_cup.runtime.Symbol) CUP$ProtagParser$stack.elementAt(CUP$ProtagParser$top-2)).value;
		int decimalPartleft = ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.peek()).left;
		int decimalPartright = ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.peek()).right;
		Integer decimalPart = (Integer)((java_cup.runtime.Symbol) CUP$ProtagParser$stack.peek()).value;
		 RESULT = new XDecimal(integerPart, decimalPart); 
              CUP$ProtagParser$result = parser.getSymbolFactory().newSymbol("_decimal",10, ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.elementAt(CUP$ProtagParser$top-2)), ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.peek()), RESULT);
            }
          return CUP$ProtagParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // _sign ::= PLUS 
            {
              ESignType RESULT =null;
		 RESULT = ESignType.PLUS; 
              CUP$ProtagParser$result = parser.getSymbolFactory().newSymbol("_sign",9, ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.peek()), RESULT);
            }
          return CUP$ProtagParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // _sign ::= MINUS 
            {
              ESignType RESULT =null;
		 RESULT = ESignType.MINUS; 
              CUP$ProtagParser$result = parser.getSymbolFactory().newSymbol("_sign",9, ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.peek()), RESULT);
            }
          return CUP$ProtagParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // _unboundedData ::= _baseData 
            {
              ProtagNode RESULT =null;
		int baseleft = ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.peek()).left;
		int baseright = ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.peek()).right;
		ProtagNode base = (ProtagNode)((java_cup.runtime.Symbol) CUP$ProtagParser$stack.peek()).value;
		 RESULT = base; 
              CUP$ProtagParser$result = parser.getSymbolFactory().newSymbol("_unboundedData",6, ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.peek()), RESULT);
            }
          return CUP$ProtagParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // spacing ::= WHITESPACE spacing 
            {
              LinkedList<LProtagLineComment> RESULT =null;
		int prevleft = ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.peek()).left;
		int prevright = ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.peek()).right;
		LinkedList<LProtagLineComment> prev = (LinkedList<LProtagLineComment>)((java_cup.runtime.Symbol) CUP$ProtagParser$stack.peek()).value;
		 RESULT = prev; 
              CUP$ProtagParser$result = parser.getSymbolFactory().newSymbol("spacing",11, ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.elementAt(CUP$ProtagParser$top-1)), ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.peek()), RESULT);
            }
          return CUP$ProtagParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // spacing ::= ProtagComment spacing 
            {
              LinkedList<LProtagLineComment> RESULT =null;
		int commentleft = ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.elementAt(CUP$ProtagParser$top-1)).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.elementAt(CUP$ProtagParser$top-1)).right;
		LProtagLineComment comment = (LProtagLineComment)((java_cup.runtime.Symbol) CUP$ProtagParser$stack.elementAt(CUP$ProtagParser$top-1)).value;
		int prevleft = ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.peek()).left;
		int prevright = ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.peek()).right;
		LinkedList<LProtagLineComment> prev = (LinkedList<LProtagLineComment>)((java_cup.runtime.Symbol) CUP$ProtagParser$stack.peek()).value;
		
        if(prev == null) {
            RESULT = new LinkedList<>();
        } else {
            RESULT = prev;
        }
        RESULT.addFirst(comment);
    
              CUP$ProtagParser$result = parser.getSymbolFactory().newSymbol("spacing",11, ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.elementAt(CUP$ProtagParser$top-1)), ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.peek()), RESULT);
            }
          return CUP$ProtagParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // spacing ::= 
            {
              LinkedList<LProtagLineComment> RESULT =null;
		 RESULT = null; 
              CUP$ProtagParser$result = parser.getSymbolFactory().newSymbol("spacing",11, ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.peek()), RESULT);
            }
          return CUP$ProtagParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ProtagComment ::= COMMENT 
            {
              LProtagLineComment RESULT =null;
		int commentleft = ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.peek()).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.peek()).right;
		CharSequence comment = (CharSequence)((java_cup.runtime.Symbol) CUP$ProtagParser$stack.peek()).value;
		 RESULT = new LProtagLineComment(comment); 
              CUP$ProtagParser$result = parser.getSymbolFactory().newSymbol("ProtagComment",2, ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ProtagParser$stack.peek()), RESULT);
            }
          return CUP$ProtagParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ProtagParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ProtagParser$do_action(
    int                        CUP$ProtagParser$act_num,
    java_cup.runtime.lr_parser CUP$ProtagParser$parser,
    java.util.Stack            CUP$ProtagParser$stack,
    int                        CUP$ProtagParser$top)
    throws java.lang.Exception
    {
              return CUP$ProtagParser$do_action_part00000000(
                               CUP$ProtagParser$act_num,
                               CUP$ProtagParser$parser,
                               CUP$ProtagParser$stack,
                               CUP$ProtagParser$top);
    }
}

}
