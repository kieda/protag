// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/main/jflex/io/hostilerobot/protag/lang/protag.flex

package io.hostilerobot.protag.parser;

import io.hostilerobot.protag.parser.*;

import java.io.IOError;import java.io.IOException;import java.util.ArrayDeque;import java.util.Deque;
import static io.hostilerobot.protag.parser.ProtagTokenType.*;


@SuppressWarnings("fallthrough")
public class ProtagLexer implements TokenSource<ProtagSymbol> {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int LITERAL_STATE = 2;
  public static final int REGEX_STATE = 4;
  public static final int REGEX_CLASS = 6;
  public static final int BEFORE_SLASH = 8;
  public static final int AFTER_SLASH = 10;
  public static final int PENDING_SLASH = 12;
  public static final int BEFORE_JSCOPE = 14;
  public static final int AFTER_JSCOPE = 16;
  public static final int PENDING_JSCOPE = 18;
  public static final int BEFORE_PSCOPE = 20;
  public static final int AFTER_PSCOPE = 22;
  public static final int PENDING_PSCOPE = 24;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\126\u0100\1\u2600\1\u0100\1\u2700"+
    "\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\53\u0100\1\u2d00\41\u1f00"+
    "\1\u0100\1\u2e00\1\u2f00\1\u0100\1\u3000\1\u3100\1\u3200\1\u3300"+
    "\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u0100\1\u3900\1\u3a00"+
    "\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100\1\u4200"+
    "\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900\1\u4a00"+
    "\1\u4b00\1\u4c00\1\u1f00\1\u4d00\1\u4e00\1\u4f00\1\u5000\3\u0100"+
    "\1\u5100\1\u5200\1\u5300\11\u1f00\1\u5400\4\u0100\1\u5500\17\u1f00"+
    "\2\u0100\1\u5600\41\u1f00\2\u0100\1\u5700\1\u5800\2\u1f00\1\u5900"+
    "\1\u5a00\27\u0100\1\u5b00\4\u0100\1\u5c00\1\u5d00\41\u1f00\1\u5e00"+
    "\1\u0100\1\u5f00\1\u6000\11\u1f00\1\u6100\22\u1f00\1\u6200\1\u1f00"+
    "\1\u6300\1\u6400\1\u1f00\1\u6500\1\u6600\1\u6700\1\u6800\2\u1f00"+
    "\1\u6900\4\u1f00\1\u6a00\1\u6b00\1\u6c00\1\u6d00\1\u1f00\1\u6e00"+
    "\2\u1f00\1\u6f00\1\u7000\1\u7100\2\u1f00\1\u7200\1\u1f00\1\u7300"+
    "\14\u1f00\1\u7400\4\u1f00\246\u0100\1\u7500\20\u0100\1\u7600\1\u7700"+
    "\25\u0100\1\u7800\34\u0100\1\u7900\14\u1f00\2\u0100\1\u7a00\5\u1f00"+
    "\23\u0100\1\u7b00\17\u0100\1\u7c00\u0adc\u1f00\1\u7d00\1\u7e00\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\16\0\4\3"+
    "\1\1\1\5\1\6\1\7\1\10\1\11\1\12\1\11"+
    "\1\13\1\14\1\11\1\15\1\16\1\17\1\20\1\21"+
    "\12\22\1\23\1\24\1\25\1\26\1\27\1\11\1\30"+
    "\32\31\1\32\1\33\1\34\1\11\1\31\1\35\32\31"+
    "\1\36\1\11\1\37\1\11\41\0\2\3\4\31\4\3"+
    "\1\31\2\3\1\0\7\3\1\31\4\3\1\31\5\3"+
    "\27\31\1\3\37\31\1\3\u01ca\31\4\3\14\31\16\3"+
    "\5\31\7\3\1\31\1\3\1\31\21\3\160\0\5\31"+
    "\1\3\2\31\2\3\4\31\1\3\1\31\6\3\1\31"+
    "\1\3\3\31\1\3\1\31\1\3\24\31\1\3\123\31"+
    "\1\3\213\31\1\3\5\0\2\3\246\31\1\3\46\31"+
    "\2\3\1\31\6\3\51\31\6\3\1\31\1\3\55\0"+
    "\1\3\1\0\1\3\2\0\1\3\2\0\1\3\1\0"+
    "\10\3\33\31\4\3\4\31\15\3\6\0\5\3\1\31"+
    "\4\3\13\0\1\3\1\0\3\3\53\31\37\0\4\3"+
    "\2\31\1\0\143\31\1\3\1\31\10\0\1\3\6\0"+
    "\2\31\2\0\1\3\4\0\2\31\12\0\3\31\2\3"+
    "\1\31\17\3\1\0\1\31\1\0\36\31\33\0\2\3"+
    "\131\31\13\0\1\31\16\3\12\0\41\31\11\0\2\31"+
    "\4\3\1\31\2\3\1\0\30\31\4\0\1\31\11\0"+
    "\1\31\3\0\1\31\5\0\22\3\31\31\3\0\4\3"+
    "\13\31\5\3\30\31\1\3\6\31\1\3\2\0\6\3"+
    "\10\0\52\31\72\0\66\31\3\0\1\31\22\0\1\31"+
    "\7\0\12\31\2\0\2\3\12\0\1\3\20\31\3\0"+
    "\1\3\10\31\2\3\2\31\2\3\26\31\1\3\7\31"+
    "\1\3\1\31\3\3\4\31\2\3\1\0\1\31\7\0"+
    "\2\3\2\0\2\3\3\0\1\31\10\3\1\0\4\3"+
    "\2\31\1\3\3\31\2\0\2\3\12\0\4\31\7\3"+
    "\2\31\1\3\1\0\2\3\3\0\1\3\6\31\4\3"+
    "\2\31\2\3\26\31\1\3\7\31\1\3\2\31\1\3"+
    "\2\31\1\3\2\31\2\3\1\0\1\3\5\0\4\3"+
    "\2\0\2\3\3\0\3\3\1\0\7\3\4\31\1\3"+
    "\1\31\7\3\14\0\3\31\1\0\13\3\3\0\1\3"+
    "\11\31\1\3\3\31\1\3\26\31\1\3\7\31\1\3"+
    "\2\31\1\3\5\31\2\3\1\0\1\31\10\0\1\3"+
    "\3\0\1\3\3\0\2\3\1\31\17\3\2\31\2\0"+
    "\2\3\12\0\1\3\1\31\7\3\1\31\6\0\1\3"+
    "\3\0\1\3\10\31\2\3\2\31\2\3\26\31\1\3"+
    "\7\31\1\3\2\31\1\3\5\31\2\3\1\0\1\31"+
    "\7\0\2\3\2\0\2\3\3\0\7\3\3\0\4\3"+
    "\2\31\1\3\3\31\2\0\2\3\12\0\1\3\1\31"+
    "\20\3\1\0\1\31\1\3\6\31\3\3\3\31\1\3"+
    "\4\31\3\3\2\31\1\3\1\31\1\3\2\31\3\3"+
    "\2\31\3\3\3\31\3\3\14\31\4\3\5\0\3\3"+
    "\3\0\1\3\4\0\2\3\1\31\6\3\1\0\16\3"+
    "\12\0\11\3\1\31\6\3\5\0\10\31\1\3\3\31"+
    "\1\3\27\31\1\3\20\31\2\3\1\0\1\31\7\0"+
    "\1\3\3\0\1\3\4\0\7\3\2\0\1\3\3\31"+
    "\2\3\1\31\2\3\2\31\2\0\2\3\12\0\20\3"+
    "\1\31\3\0\1\3\10\31\1\3\3\31\1\3\27\31"+
    "\1\3\12\31\1\3\5\31\2\3\1\0\1\31\7\0"+
    "\1\3\3\0\1\3\4\0\7\3\2\0\6\3\2\31"+
    "\1\3\2\31\2\0\2\3\12\0\1\3\2\31\1\0"+
    "\14\3\4\0\11\31\1\3\3\31\1\3\51\31\2\0"+
    "\1\31\7\0\1\3\3\0\1\3\4\0\1\31\5\3"+
    "\3\31\1\0\7\3\3\31\2\0\2\3\12\0\12\3"+
    "\6\31\1\3\3\0\1\3\22\31\3\3\30\31\1\3"+
    "\11\31\1\3\1\31\2\3\7\31\3\3\1\0\4\3"+
    "\6\0\1\3\1\0\1\3\10\0\6\3\12\0\2\3"+
    "\2\0\15\3\60\31\1\0\2\31\7\0\4\3\10\31"+
    "\10\0\1\3\12\0\47\3\2\31\1\3\1\31\1\3"+
    "\5\31\1\3\30\31\1\3\1\31\1\3\12\31\1\0"+
    "\2\31\11\0\1\31\2\3\5\31\1\3\1\31\1\3"+
    "\7\0\1\3\12\0\2\3\4\31\40\3\1\31\27\3"+
    "\2\0\6\3\12\0\13\3\1\0\1\3\1\0\1\3"+
    "\1\0\4\3\2\0\10\31\1\3\44\31\4\3\24\0"+
    "\1\3\2\0\5\31\13\0\1\3\44\0\11\3\1\0"+
    "\71\3\53\31\24\0\1\31\12\0\6\3\6\31\4\0"+
    "\4\31\3\0\1\31\3\0\2\31\7\0\3\31\4\0"+
    "\15\31\14\0\1\31\17\0\2\3\46\31\1\3\1\31"+
    "\5\3\1\31\2\3\53\31\1\3\115\31\1\3\4\31"+
    "\2\3\7\31\1\3\1\31\1\3\4\31\2\3\51\31"+
    "\1\3\4\31\2\3\41\31\1\3\4\31\2\3\7\31"+
    "\1\3\1\31\1\3\4\31\2\3\17\31\1\3\71\31"+
    "\1\3\4\31\2\3\103\31\2\3\3\0\40\3\20\31"+
    "\20\3\126\31\2\3\6\31\3\3\u016c\31\2\3\21\31"+
    "\1\3\32\31\5\3\113\31\3\3\13\31\7\3\22\31"+
    "\4\0\11\3\23\31\3\0\13\3\22\31\2\0\14\3"+
    "\15\31\1\3\3\31\1\3\2\0\14\3\64\31\40\0"+
    "\3\3\1\31\3\3\2\31\1\0\2\3\12\0\41\3"+
    "\17\0\6\3\131\31\7\3\5\31\2\0\42\31\1\0"+
    "\1\31\5\3\106\31\12\3\37\31\1\3\14\0\4\3"+
    "\14\0\12\3\12\0\36\31\2\3\5\31\13\3\54\31"+
    "\4\3\32\31\6\3\12\0\46\3\27\31\5\0\4\3"+
    "\65\31\12\0\1\3\35\0\2\3\13\0\6\3\12\0"+
    "\15\3\1\31\10\3\16\0\1\3\20\0\61\3\5\0"+
    "\57\31\21\0\10\31\3\3\12\0\21\3\11\0\14\3"+
    "\3\0\36\31\15\0\2\31\12\0\54\31\16\0\14\3"+
    "\44\31\24\0\10\3\12\0\3\3\3\31\12\0\44\31"+
    "\2\3\11\31\7\3\53\31\2\3\3\31\20\3\3\0"+
    "\1\3\25\0\4\31\1\0\6\31\1\0\2\31\3\0"+
    "\1\31\5\3\300\31\100\0\26\31\2\3\6\31\2\3"+
    "\46\31\2\3\6\31\2\3\10\31\1\3\1\31\1\3"+
    "\1\31\1\3\1\31\1\3\37\31\2\3\65\31\1\3"+
    "\7\31\1\3\1\31\3\3\3\31\1\3\7\31\3\3"+
    "\4\31\2\3\6\31\4\3\15\31\5\3\3\31\1\3"+
    "\7\31\16\3\5\0\32\3\5\0\20\3\2\31\23\3"+
    "\1\31\13\3\5\0\1\3\12\0\1\3\1\31\15\3"+
    "\1\31\20\3\15\31\3\3\41\31\17\3\15\0\4\3"+
    "\1\0\3\3\14\0\21\3\1\31\4\3\1\31\2\3"+
    "\12\31\1\3\1\31\3\3\5\31\6\3\1\31\1\3"+
    "\1\31\1\3\1\31\1\3\4\31\1\3\13\31\2\3"+
    "\4\31\5\3\5\31\4\3\1\31\21\3\51\31\u0177\3"+
    "\345\31\6\3\4\31\3\0\2\31\14\3\46\31\1\3"+
    "\1\31\5\3\1\31\2\3\70\31\7\3\1\31\17\3"+
    "\1\0\27\31\11\3\7\31\1\3\7\31\1\3\7\31"+
    "\1\3\7\31\1\3\7\31\1\3\7\31\1\3\7\31"+
    "\1\3\7\31\1\3\40\0\57\3\1\31\325\3\3\31"+
    "\31\3\11\31\6\0\1\3\5\31\2\3\5\31\4\3"+
    "\126\31\2\3\2\0\2\3\3\31\1\3\132\31\1\3"+
    "\4\31\5\3\53\31\1\3\136\31\21\3\40\31\60\3"+
    "\320\31\100\3\215\31\103\3\56\31\2\3\15\31\3\3"+
    "\20\31\12\0\2\31\24\3\57\31\1\0\4\3\12\0"+
    "\1\3\37\31\2\0\120\31\2\0\45\3\11\31\2\3"+
    "\147\31\2\3\100\31\5\3\2\31\1\3\1\31\1\3"+
    "\5\31\30\3\20\31\1\0\3\31\1\0\4\31\1\0"+
    "\27\31\5\0\4\3\1\0\13\3\1\31\7\3\64\31"+
    "\14\3\2\0\62\31\22\0\12\3\12\0\6\3\22\0"+
    "\6\31\3\3\1\31\1\3\2\31\13\0\34\31\10\0"+
    "\2\3\27\31\15\0\14\3\35\31\3\3\4\0\57\31"+
    "\16\0\16\3\1\31\12\0\6\3\5\31\1\0\12\31"+
    "\12\0\5\31\1\3\51\31\16\0\11\3\3\31\1\0"+
    "\10\31\2\0\2\3\12\0\6\3\27\31\3\3\1\31"+
    "\3\0\62\31\1\0\1\31\3\0\2\31\2\0\5\31"+
    "\2\0\1\31\1\0\1\31\30\3\3\31\2\3\13\31"+
    "\5\0\2\3\3\31\2\0\12\3\6\31\2\3\6\31"+
    "\2\3\6\31\11\3\7\31\1\3\7\31\1\3\53\31"+
    "\1\3\16\31\6\3\163\31\10\0\1\3\2\0\2\3"+
    "\12\0\6\3\244\31\14\3\27\31\4\3\61\31\4\3"+
    "\156\31\2\3\152\31\46\3\7\31\14\3\5\31\5\3"+
    "\1\31\1\0\12\31\1\3\15\31\1\3\5\31\1\3"+
    "\1\31\1\3\2\31\1\3\2\31\1\3\154\31\41\3"+
    "\153\31\22\3\100\31\2\3\66\31\50\3\15\31\3\3"+
    "\20\0\20\3\20\0\3\3\2\31\30\3\3\31\31\3"+
    "\1\31\6\3\5\31\1\3\207\31\2\3\1\0\4\3"+
    "\1\31\13\3\12\0\7\3\32\31\4\3\1\31\1\3"+
    "\32\31\13\3\131\31\3\3\6\31\2\3\6\31\2\3"+
    "\6\31\2\3\3\31\3\3\2\31\3\3\2\31\22\3"+
    "\3\0\4\3\14\31\1\3\32\31\1\3\23\31\1\3"+
    "\2\31\1\3\17\31\2\3\16\31\42\3\173\31\105\3"+
    "\65\31\210\3\1\0\202\3\35\31\3\3\61\31\17\3"+
    "\1\0\37\3\40\31\15\3\36\31\5\3\46\31\5\0"+
    "\5\3\36\31\2\3\44\31\4\3\10\31\1\3\5\31"+
    "\52\3\236\31\2\3\12\0\6\3\44\31\4\3\44\31"+
    "\4\3\50\31\10\3\64\31\14\3\13\31\1\3\17\31"+
    "\1\3\7\31\1\3\2\31\1\3\13\31\1\3\17\31"+
    "\1\3\7\31\1\3\2\31\103\3\67\31\11\3\26\31"+
    "\12\3\10\31\30\3\6\31\1\3\52\31\1\3\11\31"+
    "\105\3\6\31\2\3\1\31\1\3\54\31\1\3\2\31"+
    "\3\3\1\31\2\3\27\31\12\3\27\31\11\3\37\31"+
    "\101\3\23\31\1\3\2\31\12\3\26\31\12\3\32\31"+
    "\106\3\70\31\6\3\2\31\100\3\1\31\3\0\1\3"+
    "\2\0\5\3\4\0\4\31\1\3\3\31\1\3\35\31"+
    "\2\3\3\0\4\3\1\0\40\3\35\31\3\3\35\31"+
    "\43\3\10\31\1\3\34\31\2\0\31\3\66\31\12\3"+
    "\26\31\12\3\23\31\15\3\22\31\156\3\111\31\67\3"+
    "\63\31\15\3\63\31\15\3\44\31\4\0\10\3\12\0"+
    "\u0146\3\52\31\1\3\2\0\3\3\2\31\113\3\3\0"+
    "\35\31\12\3\1\31\10\3\26\31\13\0\37\3\22\31"+
    "\4\0\52\3\25\31\33\3\27\31\11\3\3\0\65\31"+
    "\17\0\37\3\13\0\2\31\2\0\1\31\11\3\4\0"+
    "\55\31\13\0\2\3\1\0\4\3\1\0\12\3\1\0"+
    "\2\3\31\31\7\3\12\0\6\3\3\0\44\31\16\0"+
    "\1\3\12\0\4\3\1\31\2\0\1\31\10\3\43\31"+
    "\1\0\2\3\1\31\11\3\3\0\60\31\16\0\4\31"+
    "\4\3\4\0\1\3\14\0\1\31\1\3\1\31\43\3"+
    "\22\31\1\3\31\31\14\0\6\3\1\0\2\31\1\0"+
    "\76\3\7\31\1\3\1\31\1\3\4\31\1\3\17\31"+
    "\1\3\12\31\7\3\57\31\14\0\5\3\12\0\6\3"+
    "\4\0\1\3\10\31\2\3\2\31\2\3\26\31\1\3"+
    "\7\31\1\3\2\31\1\3\5\31\1\3\2\0\1\31"+
    "\7\0\2\3\2\0\2\3\3\0\2\3\1\31\6\3"+
    "\1\0\5\3\5\31\2\0\2\3\7\0\3\3\5\0"+
    "\213\3\65\31\22\0\4\31\5\3\12\0\4\3\1\0"+
    "\3\31\36\3\60\31\24\0\2\31\1\3\1\31\10\3"+
    "\12\0\246\3\57\31\7\0\2\3\11\0\27\3\4\31"+
    "\2\0\42\3\60\31\21\0\3\3\1\31\13\3\12\0"+
    "\46\3\53\31\15\0\1\31\7\3\12\0\66\3\33\31"+
    "\2\3\17\0\4\3\12\0\6\3\7\31\271\3\54\31"+
    "\17\0\145\3\100\31\12\0\25\3\10\31\2\3\1\31"+
    "\2\3\10\31\1\3\2\31\1\3\30\31\6\0\1\3"+
    "\2\0\2\3\4\0\1\31\1\0\1\31\2\0\14\3"+
    "\12\0\106\3\10\31\2\3\47\31\7\0\2\3\7\0"+
    "\1\31\1\3\1\31\1\0\33\3\1\31\12\0\50\31"+
    "\7\0\1\31\4\0\10\3\1\0\10\3\1\31\13\0"+
    "\56\31\20\0\3\3\1\31\22\3\111\31\7\3\11\31"+
    "\1\3\45\31\10\0\1\3\10\0\1\31\17\3\12\0"+
    "\30\3\36\31\2\3\26\0\1\3\16\0\111\3\7\31"+
    "\1\3\2\31\1\3\46\31\6\0\3\3\1\0\1\3"+
    "\2\0\1\3\7\0\1\31\1\0\10\3\12\0\6\3"+
    "\6\31\1\3\2\31\1\3\40\31\5\0\1\3\2\0"+
    "\1\3\5\0\1\31\7\3\12\0\u0136\3\23\31\4\0"+
    "\11\3\2\0\1\31\1\0\15\31\1\3\42\31\7\0"+
    "\3\3\5\0\15\3\12\0\126\3\1\31\54\3\4\31"+
    "\37\3\232\31\146\3\157\31\21\3\304\31\u014c\3\141\31"+
    "\17\3\60\31\21\0\6\31\17\0\252\3\107\31\271\3"+
    "\71\31\7\3\37\31\1\3\12\0\6\3\117\31\1\3"+
    "\12\0\6\3\36\31\2\3\5\0\13\3\60\31\7\0"+
    "\11\3\4\31\14\3\12\0\11\3\25\31\5\3\23\31"+
    "\260\3\100\31\200\3\113\31\4\3\1\0\1\31\67\0"+
    "\7\3\4\0\15\31\100\3\2\31\1\3\1\31\1\0"+
    "\13\3\2\0\16\3\370\31\10\3\326\31\52\3\11\31"+
    "\u01e7\3\4\31\1\3\7\31\1\3\2\31\1\3\43\31"+
    "\17\3\1\31\35\3\3\31\2\3\1\31\16\3\4\31"+
    "\10\3\u018c\31\4\3\153\31\5\3\15\31\3\3\11\31"+
    "\7\3\12\31\3\3\2\0\1\3\4\0\134\3\56\0"+
    "\2\3\27\0\u011e\3\5\0\3\3\26\0\2\3\7\0"+
    "\36\3\4\0\224\3\3\0\273\3\125\31\1\3\107\31"+
    "\1\3\2\31\2\3\1\31\2\3\2\31\2\3\4\31"+
    "\1\3\14\31\1\3\1\31\1\3\7\31\1\3\101\31"+
    "\1\3\4\31\2\3\10\31\1\3\7\31\1\3\34\31"+
    "\1\3\4\31\1\3\5\31\1\3\1\31\3\3\7\31"+
    "\1\3\u0154\31\2\3\31\31\1\3\31\31\1\3\37\31"+
    "\1\3\31\31\1\3\37\31\1\3\31\31\1\3\37\31"+
    "\1\3\31\31\1\3\37\31\1\3\31\31\1\3\10\31"+
    "\2\3\151\0\4\3\62\0\10\3\1\0\16\3\1\0"+
    "\26\3\5\0\1\3\17\0\120\3\37\31\6\3\6\31"+
    "\325\3\7\0\1\3\21\0\2\3\7\0\1\3\2\0"+
    "\1\3\5\0\5\3\76\31\41\3\1\0\160\3\55\31"+
    "\3\3\7\0\7\31\2\3\12\0\4\3\1\31\u0141\3"+
    "\36\31\1\0\21\3\54\31\16\0\5\3\1\31\320\3"+
    "\34\31\16\0\346\3\7\31\1\3\4\31\1\3\2\31"+
    "\1\3\17\31\1\3\305\31\13\3\7\0\51\3\104\31"+
    "\7\0\1\31\4\3\12\0\u0156\3\1\31\117\3\4\31"+
    "\1\3\33\31\1\3\2\31\1\3\1\31\2\3\1\31"+
    "\1\3\12\31\1\3\4\31\1\3\1\31\1\3\1\31"+
    "\6\3\1\31\4\3\1\31\1\3\1\31\1\3\1\31"+
    "\1\3\3\31\1\3\2\31\1\3\1\31\2\3\1\31"+
    "\1\3\1\31\1\3\1\31\1\3\1\31\1\3\1\31"+
    "\1\3\2\31\1\3\1\31\2\3\4\31\1\3\7\31"+
    "\1\3\4\31\1\3\4\31\1\3\1\31\1\3\12\31"+
    "\1\3\21\31\5\3\3\31\1\3\5\31\1\3\21\31"+
    "\u0134\3\12\0\6\3\340\31\40\3\72\31\6\3\336\31"+
    "\2\3\u0182\31\16\3\u0131\31\37\3\36\31\342\3\113\31"+
    "\5\3\u0160\31\121\3\1\0\36\3\140\0\200\3\360\0"+
    "\20\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[32512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\15\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\6\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\6\1\30\1\32\1\6\1\33"+
    "\1\30\1\34\1\35\1\36\1\37\1\40\1\35\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\14"+
    "\1\61\1\62\1\63\1\64\1\0\2\5\1\65\1\66"+
    "\1\30\1\35\2\40\1\43\2\52\1\0\2\60\1\0"+
    "\1\67\1\70";

  private static int [] zzUnpackAction() {
    int [] result = new int[90];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\40\0\100\0\140\0\200\0\240\0\300\0\340"+
    "\0\u0100\0\u0120\0\u0140\0\u0160\0\u0180\0\u01a0\0\u01c0\0\u01e0"+
    "\0\u01e0\0\u0200\0\u01e0\0\u01e0\0\u01e0\0\u01e0\0\u01e0\0\u01e0"+
    "\0\u0220\0\u01e0\0\u01e0\0\u0240\0\u01e0\0\u0260\0\u01e0\0\u01e0"+
    "\0\u01e0\0\u01e0\0\u01e0\0\u01e0\0\u01e0\0\u0280\0\u01e0\0\u02a0"+
    "\0\u02c0\0\u01e0\0\u02e0\0\u01e0\0\u0300\0\u01e0\0\u0320\0\u0340"+
    "\0\u01e0\0\u0360\0\u0380\0\u01e0\0\u01e0\0\u03a0\0\u01e0\0\u01e0"+
    "\0\u01e0\0\u01e0\0\u03c0\0\u03e0\0\u0400\0\u01e0\0\u01e0\0\u0420"+
    "\0\u0440\0\u0460\0\u0480\0\u04a0\0\u01e0\0\u04c0\0\u04e0\0\u0500"+
    "\0\u0520\0\u01e0\0\u0540\0\u01e0\0\u01e0\0\u01e0\0\u0560\0\u01e0"+
    "\0\u0580\0\u05a0\0\u01e0\0\u05c0\0\u05e0\0\u01e0\0\u0600\0\u0620"+
    "\0\u01e0\0\u01e0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[90];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\16\2\17\1\16\1\17\1\20\1\21\1\22\2\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\23\1\36\1\37\1\23\1\40\1\16"+
    "\1\41\1\23\1\42\1\43\1\44\1\45\6\46\1\47"+
    "\24\46\1\50\4\46\32\51\1\52\1\53\1\51\1\54"+
    "\2\51\33\55\1\50\1\56\3\55\1\57\2\60\1\57"+
    "\1\60\1\20\1\61\1\62\3\57\1\25\1\26\1\57"+
    "\1\30\1\63\1\57\1\64\1\57\1\35\1\23\1\36"+
    "\1\37\1\23\1\40\1\57\1\41\1\57\1\42\1\65"+
    "\1\44\1\45\1\66\2\17\1\66\1\17\1\23\1\61"+
    "\1\22\3\66\1\25\1\26\1\66\1\23\2\66\1\33"+
    "\1\66\6\23\1\66\1\41\1\66\1\42\1\65\1\44"+
    "\1\45\1\16\2\17\1\16\1\17\1\20\1\67\1\22"+
    "\2\23\1\24\1\70\1\26\1\27\1\30\1\31\1\23"+
    "\1\64\1\34\1\35\1\23\1\36\1\37\1\23\1\40"+
    "\1\16\1\71\1\23\1\42\1\43\1\72\1\45\1\73"+
    "\2\74\1\23\1\74\1\20\1\61\1\75\1\73\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\76\1\77"+
    "\1\73\1\35\1\23\1\36\1\37\1\23\1\40\1\73"+
    "\1\41\1\23\1\42\1\65\1\44\1\45\1\23\2\17"+
    "\1\23\1\17\1\23\1\61\1\22\1\100\2\23\1\25"+
    "\1\26\14\23\1\100\1\41\1\23\1\42\1\65\1\44"+
    "\1\45\1\16\2\17\1\16\1\17\1\20\1\67\1\22"+
    "\2\23\1\24\1\70\1\26\1\27\1\30\1\31\1\76"+
    "\1\77\1\34\1\35\1\23\1\36\1\37\1\23\1\40"+
    "\1\16\1\71\1\23\1\42\1\43\1\72\1\45\1\101"+
    "\2\102\1\101\1\102\1\20\1\61\1\103\2\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\104\1\105\1\77\1\106"+
    "\1\35\1\23\1\36\1\37\1\23\1\40\1\101\1\41"+
    "\1\23\1\42\1\65\1\44\1\45\1\107\2\17\1\107"+
    "\1\17\1\23\1\61\1\22\3\23\1\25\1\26\5\23"+
    "\1\110\6\23\1\107\1\41\1\23\1\42\1\65\1\44"+
    "\1\45\1\16\2\17\1\16\1\17\1\20\1\67\1\22"+
    "\2\23\1\24\1\70\1\26\1\27\1\30\1\31\1\105"+
    "\1\77\1\34\1\35\1\23\1\36\1\37\1\23\1\40"+
    "\1\16\1\71\1\23\1\42\1\43\1\72\1\45\1\16"+
    "\2\0\1\16\13\0\1\111\2\0\1\16\6\0\1\16"+
    "\7\0\2\17\1\0\1\17\73\0\2\22\1\112\1\22"+
    "\1\113\33\22\27\0\1\114\32\0\1\34\34\0\1\115"+
    "\20\0\6\46\1\0\24\46\1\0\4\46\40\116\32\51"+
    "\2\0\1\51\1\0\2\51\32\116\1\56\2\116\1\56"+
    "\2\116\33\55\2\0\3\55\1\57\2\0\1\57\4\0"+
    "\3\57\2\0\1\57\1\0\1\117\1\57\1\0\1\57"+
    "\6\0\1\57\1\0\1\57\5\0\2\60\1\0\1\60"+
    "\33\0\2\62\1\120\1\62\1\121\33\62\1\57\2\0"+
    "\1\57\4\0\3\57\2\0\1\57\1\0\1\117\1\57"+
    "\1\0\1\57\4\0\1\114\1\0\1\57\1\0\1\57"+
    "\4\0\1\66\2\0\1\66\4\0\3\66\2\0\1\66"+
    "\1\0\1\122\1\66\1\0\1\66\6\0\1\66\1\0"+
    "\1\66\4\0\1\73\7\0\1\73\11\0\1\73\6\0"+
    "\1\73\7\0\2\74\1\0\1\74\33\0\2\75\1\123"+
    "\1\75\1\124\33\75\1\100\7\0\1\100\11\0\1\100"+
    "\6\0\1\100\6\0\1\101\2\0\1\101\13\0\1\125"+
    "\2\0\1\101\6\0\1\101\7\0\2\102\1\0\1\102"+
    "\33\0\2\103\1\126\1\103\1\127\33\103\1\101\2\0"+
    "\1\101\23\0\1\114\1\0\1\101\6\0\1\101\2\0"+
    "\1\101\13\0\1\125\2\0\1\106\6\0\1\101\6\0"+
    "\1\107\2\0\1\107\13\0\1\130\2\0\1\107\6\0"+
    "\1\107\30\0\1\110\15\0\1\16\2\0\1\16\25\0"+
    "\1\16\10\0\1\112\35\0\1\57\2\0\1\57\4\0"+
    "\3\57\2\0\1\57\1\0\1\117\1\57\1\0\1\57"+
    "\4\0\1\131\1\0\1\57\1\0\1\57\6\0\1\120"+
    "\35\0\1\66\2\0\1\66\4\0\3\66\2\0\1\66"+
    "\1\0\1\122\1\66\1\0\1\66\4\0\1\132\1\0"+
    "\1\66\1\0\1\66\6\0\1\123\35\0\1\101\2\0"+
    "\1\101\25\0\1\101\10\0\1\126\35\0\1\107\2\0"+
    "\1\107\25\0\1\107\6\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[1600];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\15\0\2\1\2\11\1\1\6\11\1\1\2\11\1\1"+
    "\1\11\1\1\7\11\1\1\1\11\2\1\1\11\1\1"+
    "\1\11\1\1\1\11\2\1\1\11\2\1\2\11\1\1"+
    "\4\11\3\1\2\11\5\1\1\11\3\1\1\0\1\11"+
    "\1\1\3\11\1\1\1\11\2\1\1\11\1\1\1\0"+
    "\1\11\1\1\1\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[90];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
private int markedPos = -1;
private Location markedLocation = null;

private void mark() {
    if(isMarked())
        throw new IllegalStateException("Already marked! call unmark() before calling this.");
    markedPos = zzStartRead;
    markedLocation = currentLocation();
}
private void unmark() {
    markedPos = -1;
    markedLocation = null;
}
private boolean isMarked() {
    return markedPos >= 0 && markedLocation != null;
}

@Override
public ProtagSymbol getNextToken() {
      try {
          return _getNextToken();
      } catch(IOException ex) {
          throw new IOError(ex);
      }
}

private String getText() {
    if(isMarked()) {
        return new String(zzBuffer, markedPos, zzMarkedPos-markedPos);
    } else {
        return yytext();
    }
}
private Location getLocation() {
    if(isMarked()) {
        return markedLocation;
    } else {
        return currentLocation();
    }
}
private Location currentLocation() {
    return new Location(yyline, yycolumn, (int)yychar);
}

// ProtagTokenType x Location -> Symbol
// ProtagTokenType x String x Location
private ProtagSymbol symbol( ProtagTokenType type ) {
    if(type == EOF) {
        return new EOFToken(currentLocation());
    } else if(type == NATURAL) {
        return new ProtagNaturalToken(currentLocation(), yytext());
    } else if(type.isFixed()) {
        return new ProtagSpecialToken(type, currentLocation());
    } else if(type == LITERAL || type == REGEX){
        String val = getText();
        Location loc = getLocation();
        unmark();
        return new ProtagStringToken(type, loc, val);
    } else {
        return new ProtagStringToken(type, currentLocation(), yytext());
    }
}

enum PathContext{
      // base is used when we're not actively in a yapping segment.
      BASE(YYINITIAL, YYINITIAL),
      FILE(AFTER_SLASH, BEFORE_SLASH),
      JAVA(AFTER_JSCOPE, BEFORE_JSCOPE),
      PROTAG(AFTER_PSCOPE, BEFORE_PSCOPE);
      private final int fallback;
      private final int initialState;
      PathContext(int initialState, int fallback) {
          this.initialState = initialState;
          this.fallback = fallback;
      }
}
// we want to handle java paths !com.user.Plugin
// different from file paths @file/user/pugin.yap
// different from PROTAG paths { ... }.my-value.3.length
private Deque<PathContext> context = new ArrayDeque<>();
{
  // top level is all BASE
  // this item should be here throughout all lexing
  context.push(PathContext.BASE);
}

public void reset() {
    context.clear();
    context.push(PathContext.BASE);
    unmark();
    yybegin(YYINITIAL);
}

private String getStateName(int state) {
    switch(state) {
        case AFTER_JSCOPE: return "AFTER_JSCOPE";
        case AFTER_SLASH: return "AFTER_SLASH";
        case AFTER_PSCOPE: return "AFTER_PSCOPE";
        case BEFORE_JSCOPE: return "BEFORE_JSCOPE";
        case BEFORE_SLASH: return "BEFORE_SLASH";
        case BEFORE_PSCOPE: return "BEFORE_PSCOPE";
        case PENDING_JSCOPE: return "PENDING_JSCOPE";
        case PENDING_SLASH: return "PENDING_SLASH";
        case PENDING_PSCOPE: return "PENDING_PSCOPE";
        case LITERAL_STATE: return "LITERAL";
        case REGEX_STATE: return "REGEX";
        case REGEX_CLASS: return "REGEX_CLASS";
        case YYINITIAL: return "YYINITIAL";
        default: return "ERROR_UNKNOWN_STATE";
    }
}

private void debugCurrentState(String methodName) {
    /*System.out.println(
        methodName + ": " + getStateName(yystate()) + ": " + context
    );*/
}

private int getCurrentFallback() {
    debugCurrentState("getCurrentFallback");
    return context.peek().fallback;
}
// file path interrupts the current segment and starts a new one that's file
// @asdf!asdf asdf!asdf !asdf !asdf
private void encounterFilePath() {
    debugCurrentState("START encounterFilePath");
    endTransition();
    context.push(PathContext.FILE);
    yybegin(PathContext.FILE.initialState);
    debugCurrentState("END encounterFilePath");
}
private void encounterJavaPath() {
    debugCurrentState("START encounterJavaPath");
    endTransition();
    context.push(PathContext.JAVA);
    yybegin(PathContext.JAVA.initialState);
    debugCurrentState("END encounterJavaPath");
}

// new path that starts with a regex
private void encounterRegexSegment() {
    debugCurrentState("START encounterRegexSegment");
    mark();
    endTransition();
    context.push(PathContext.PROTAG);
    yybegin(REGEX_STATE);
    debugCurrentState("END encounterRegexSegment");
}
// new path that starts with a literal
// !asdf "asdf"
//       ^
private void encounterLiteralSegment() {
    debugCurrentState("START encounterLiteralSegment");
    mark();
    endTransition();
    context.push(PathContext.PROTAG);
    yybegin(LITERAL_STATE);
    debugCurrentState("END encounterLiteralSegment");
}

// open parentheses on a new yapping path, e.g. [ ( {
// asdf ( .. )
//      ^
// !asdf ( .. )
//       ^
private void encounterOpenSegment() {
    debugCurrentState("START encounterOpenSegment");
    endTransition();
    context.push(PathContext.BASE);
    yybegin(PathContext.BASE.initialState);
    debugCurrentState("END encounterOpenSegment");
}

// asdf asdf
//      ^
// !asdf asdf
//       ^
private void encounterProTagPath() {
    debugCurrentState("START encounterProTagPath");
    endTransition();
    context.push(PathContext.PROTAG);
    yybegin(PathContext.PROTAG.fallback);
    debugCurrentState("END encounterProTagPath");
}

// !asdf=asdf
//      ^
// @asdf, asdf
//      ^
private void endCurrentPath() {
    debugCurrentState("START endCurrentPath");
    endTransition();
    yybegin(PathContext.BASE.initialState);
    debugCurrentState("END endCurrentPath");
}

// ends the current segment
private void endTransition() {
    // encounter a start of a new yapping segment after PENDING
    if(context.size() > 1 && context.peek() != PathContext.BASE) {
        // !asdf.asdf  =  asdf
        // [F, B]     [B] [Y, B]
        context.pop();
        if(context.peek() != PathContext.BASE) {
            reset();
            // should never happen but we check anyway
            throw new IllegalStateException("Expected BASE instead found " + context.peek());
        }
    }
}

private void openCurrentSegment() {
    debugCurrentState("START openCurrentSegment");
    // encounter a (, {, or [ while in a segment
    context.push(PathContext.BASE);
    if(yystate() != PathContext.BASE.initialState) {
        yybegin(PathContext.BASE.initialState);
    }
    debugCurrentState("END openCurrentSegment");
}
private void closeCurrentSegment() {
    debugCurrentState("START closeCurrentSegment");
    // encounter ), ], or }
    if(context.size() > 1 && context.peek() == PathContext.BASE) {
        context.pop();
        // !sadf[asdf]
        //           ^
        // sadf[[asdf]]
        //           ^^
        PathContext contextResult = context.peek();
        yybegin(contextResult.fallback);
    } else if(context.size() > 2 && context.peek() != PathContext.BASE) {
        // !sa/df[!asdf]as/df
        //             ^
        context.pop(); // stop the current java or file path
        // context.size() > 1
        if(context.peek() != PathContext.BASE) {
            reset();
            // should never happen but we check anyway
            throw new IllegalStateException("Expected BASE instead found " + context.peek());
        }
        // remove this context - it corresponds to the opening brace which has now just ended
        context.pop();
        // context.size() > 0

        PathContext contextResult = context.peek();
        // we return to this context
        yybegin(contextResult.fallback);
    } else {
        // will only occur if we have a sequence with
        // sadf] or !asdf]
        if(context.size() > 1) {
            context.pop();
        }
        yybegin(PathContext.PROTAG.fallback);
    }
    // todo - should we throw if we encounter mismatched segments?
    //        ex: asdf)asdf
    //        currently we just fall back to PROTAG and let the parser deal with it
    debugCurrentState("END closeCurrentSegment");
}

private static String zzToPrintable(CharSequence cs) {
    return zzToPrintable(cs.toString());
}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ProtagLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public ProtagSymbol _getNextToken() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case LITERAL_STATE: {
              reset(); return symbol(ERROR_ELEMENT);
            }  // fall though
            case 91: break;
            case REGEX_STATE: {
              reset(); return symbol(ERROR_ELEMENT);
            }  // fall though
            case 92: break;
            case REGEX_CLASS: {
              reset(); return symbol(ERROR_ELEMENT);
            }  // fall though
            case 93: break;
            default:
          {     return symbol(EOF);
 }
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { encounterProTagPath();
                                                        return symbol(PNAME);
            }
          // fall through
          case 57: break;
          case 2:
            { return symbol(WHITESPACE);
            }
          // fall through
          case 58: break;
          case 3:
            { /* fall back to BEFORE_SLASH when we're done parsing regex or literal */
                                                        encounterFilePath();
                                                        return symbol(FPATH_START);
            }
          // fall through
          case 59: break;
          case 4:
            { encounterLiteralSegment();
            }
          // fall through
          case 60: break;
          case 5:
            { return symbol(COMMENT);
            }
          // fall through
          case 61: break;
          case 6:
            { return symbol(BAD_CHARACTER);
            }
          // fall through
          case 62: break;
          case 7:
            { endCurrentPath();
                                                        return symbol(AND);
            }
          // fall through
          case 63: break;
          case 8:
            { openCurrentSegment();
                                                        return symbol(PRECEDENCE_START);
            }
          // fall through
          case 64: break;
          case 9:
            { closeCurrentSegment();
                                                        return symbol(PRECEDENCE_END);
            }
          // fall through
          case 65: break;
          case 10:
            { endCurrentPath();
                                                        return symbol(PLUS);
            }
          // fall through
          case 66: break;
          case 11:
            { endCurrentPath();
                                                        return symbol(LIST_SEP);
            }
          // fall through
          case 67: break;
          case 12:
            { endCurrentPath();
                                                        return symbol(MINUS);
            }
          // fall through
          case 68: break;
          case 13:
            { return symbol(DOT);
            }
          // fall through
          case 69: break;
          case 14:
            { return symbol(SLASH);
            }
          // fall through
          case 70: break;
          case 15:
            { encounterProTagPath();
                                                        return symbol(NATURAL);
            }
          // fall through
          case 71: break;
          case 16:
            { endCurrentPath();
                                                        return symbol(PROPERTY_SEP);
            }
          // fall through
          case 72: break;
          case 17:
            { endCurrentPath();
                                                        return symbol(PAIR_SEP);
            }
          // fall through
          case 73: break;
          case 18:
            { encounterJavaPath();
                                                        return symbol(JPATH_START);
            }
          // fall through
          case 74: break;
          case 19:
            { openCurrentSegment();
                                                        return symbol(LIST_START);
            }
          // fall through
          case 75: break;
          case 20:
            { closeCurrentSegment();
                                                        return symbol(LIST_END);
            }
          // fall through
          case 76: break;
          case 21:
            { encounterRegexSegment();
            }
          // fall through
          case 77: break;
          case 22:
            { openCurrentSegment();
                                                        return symbol(MAP_START);
            }
          // fall through
          case 78: break;
          case 23:
            { closeCurrentSegment();
                                                        return symbol(MAP_END);
            }
          // fall through
          case 79: break;
          case 24:
            { 
            }
          // fall through
          case 80: break;
          case 25:
            { yybegin(getCurrentFallback());
                                                            return symbol(LITERAL);
            }
          // fall through
          case 81: break;
          case 26:
            { yybegin(REGEX_CLASS);
            }
          // fall through
          case 82: break;
          case 27:
            { yybegin(getCurrentFallback()); return symbol(REGEX);
            }
          // fall through
          case 83: break;
          case 28:
            { yybegin(REGEX_STATE);
            }
          // fall through
          case 84: break;
          case 29:
            { return symbol(FNAME);
            }
          // fall through
          case 85: break;
          case 30:
            { yybegin(PENDING_SLASH); return symbol(WHITESPACE);
            }
          // fall through
          case 86: break;
          case 31:
            { mark();
                                                        yybegin(LITERAL_STATE);
            }
          // fall through
          case 87: break;
          case 32:
            { yybegin(PENDING_SLASH); return symbol(COMMENT);
            }
          // fall through
          case 88: break;
          case 33:
            { yybegin(AFTER_SLASH); return symbol(SLASH);
            }
          // fall through
          case 89: break;
          case 34:
            { mark();
                                                        yybegin(REGEX_STATE);
            }
          // fall through
          case 90: break;
          case 35:
            { yybegin(BEFORE_SLASH); return symbol(FNAME);
            }
          // fall through
          case 91: break;
          case 36:
            { // we are encountering a new literal
                                                        encounterLiteralSegment();
            }
          // fall through
          case 92: break;
          case 37:
            { encounterOpenSegment();
                                                        return symbol(PRECEDENCE_START);
            }
          // fall through
          case 93: break;
          case 38:
            { encounterOpenSegment();
                                                        return symbol(LIST_START);
            }
          // fall through
          case 94: break;
          case 39:
            { encounterOpenSegment();
                                                        return symbol(MAP_START);
            }
          // fall through
          case 95: break;
          case 40:
            { return symbol(JBODY);
            }
          // fall through
          case 96: break;
          case 41:
            { yybegin(PENDING_JSCOPE); return symbol(WHITESPACE);
            }
          // fall through
          case 97: break;
          case 42:
            { yybegin(PENDING_JSCOPE); return symbol(COMMENT);
            }
          // fall through
          case 98: break;
          case 43:
            { yybegin(AFTER_JSCOPE); return symbol(DOT);
            }
          // fall through
          case 99: break;
          case 44:
            { endCurrentPath();
                                                        return symbol(SLASH);
            }
          // fall through
          case 100: break;
          case 45:
            { yybegin(BEFORE_JSCOPE); return symbol(JNAME);
            }
          // fall through
          case 101: break;
          case 46:
            { return symbol(PBODY);
            }
          // fall through
          case 102: break;
          case 47:
            { yybegin(PENDING_PSCOPE); return symbol(WHITESPACE);
            }
          // fall through
          case 103: break;
          case 48:
            { yybegin(PENDING_PSCOPE); return symbol(COMMENT);
            }
          // fall through
          case 104: break;
          case 49:
            { yybegin(AFTER_PSCOPE); return symbol(DOT);
            }
          // fall through
          case 105: break;
          case 50:
            { return symbol(NATURAL);
            }
          // fall through
          case 106: break;
          case 51:
            { yybegin(BEFORE_PSCOPE); return symbol(PNAME);
            }
          // fall through
          case 107: break;
          case 52:
            { yybegin(BEFORE_PSCOPE); return symbol(NATURAL);
            }
          // fall through
          case 108: break;
          case 53:
            { endCurrentPath();
                                                        return symbol(TRANSITION_SEP_R);
            }
          // fall through
          case 109: break;
          case 54:
            { endCurrentPath();
                                                        return symbol(TRANSITION_SEP_L);
            }
          // fall through
          case 110: break;
          case 55:
            { yypushback(2);
          return symbol(FNAME);
            }
          // fall through
          case 111: break;
          case 56:
            { yypushback(2);
          yybegin(BEFORE_SLASH);
          return symbol(FNAME);
            }
          // fall through
          case 112: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
